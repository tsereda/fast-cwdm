apiVersion: batch/v1
kind: Job
metadata:
  name: fast-cwdm-job
  labels:
    app: fast-cwdm
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        app: fast-cwdm
    spec:
      nodeSelector:
        topology.kubernetes.io/region: us-west
        nautilus.io/linstor: "true"
      tolerations:
        - key: nvidia.com/gpu
          operator: Exists
        - key: nvidia.com/gpu
          operator: Exists
          effect: PreferNoSchedule
      containers:
        - name: brats-processing
          image: gitlab-registry.nrp-nautilus.io/prp/jupyter-stack/prp
          env:
            - name: REPO_PATH
              value: /app/fast-cwdm
            - name: PYTHONPATH
              value: /app/fast-cwdm
            - name: CUDA_VISIBLE_DEVICES
              value: "0"
            - name: nnUNet_raw
              value: /app/nnunet/raw
            - name: nnUNet_preprocessed
              value: /app/nnunet/preprocessed
            - name: nnUNet_results
              value: /app/nnunet/results
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: PYTHONIOENCODING
              value: "UTF-8"
            - name: WANDB_API_KEY
              valueFrom:
                secretKeyRef:
                  name: wandb-credentials
                  key: api-key
            - name: WANDB_PROJECT
              value: "cwmd-3d-brats"
            - name: WANDB_ENTITY
              value: "timgsereda"
            - name: WANDB_MODE
              value: "online"
            - name: USE_TENSORBOARD
              value: "true"
          command: ["/bin/bash", "-c"]
          args:
            - |
              git clone https://github.com/tsereda/fast-cwdm.git ${REPO_PATH}
              cd ${REPO_PATH}
              
              sudo apt-get update && sudo apt-get install -y p7zip-full wget git
              
              # Create dataset directories
              mkdir -p datasets/BRATS2023/training
              mkdir -p datasets/BRATS2023/validation
              
              # Copy ZIP files to local workspace and extract directly to target directories
              for dataset in "TrainingData" "ValidationData"; do
                zip_file="/data/ASNR-MICCAI-BraTS2023-GLI-Challenge-${dataset}.zip"
                local_zip="/app/ASNR-MICCAI-BraTS2023-GLI-Challenge-${dataset}.zip"
                
                if [ -f "$zip_file" ]; then
                  echo "Copying ${dataset} ZIP to local workspace..."
                  cp "$zip_file" "$local_zip"
                  
                  echo "Extracting ${dataset}..."
                  # Extract to temp directory
                  mkdir -p /tmp/extract
                  7z x "$local_zip" -o"/tmp/extract" -y
                  
                  # Move contents to final destination
                  if [ "$dataset" = "TrainingData" ]; then
                    mv /tmp/extract/ASNR-MICCAI-BraTS2023-GLI-Challenge-TrainingData/* datasets/BRATS2023/training/
                  elif [ "$dataset" = "ValidationData" ]; then
                    mv /tmp/extract/ASNR-MICCAI-BraTS2023-GLI-Challenge-ValidationData/* datasets/BRATS2023/validation/
                  fi
                  
                  # Clean up
                  rm -rf /tmp/extract
                  rm "$local_zip"
                  
                  echo "${dataset} processed successfully"
                fi
              done
              
              echo "Training patients: $(ls datasets/BRATS2023/training/ | wc -l)"
              echo "Validation patients: $(ls datasets/BRATS2023/validation/ | wc -l)"
              echo "Sample training patient files: $(ls datasets/BRATS2023/training/BraTS-GLI-00000-000/ | wc -l)"
              
              pip install pyyaml torch tqdm numpy nibabel wandb matplotlib blobfile tensorboard
              
              python -c "import wandb; print(f'W&B version: {wandb.__version__}')"
              python -c "import torch; print(f'GPUs available: {torch.cuda.device_count()}')"
              
              conda init bash
              source ~/.bashrc

              mamba env create -f environment.yml
              
              conda activate cwdm
              
              conda info --envs
              python --version

              LOGDIR="/data/runs"

              echo "Training patients: $(ls datasets/BRATS2023/training/ | wc -l)"
              echo "Validation patients: $(ls datasets/BRATS2023/validation/ | wc -l)"
              echo "Sample training patient files: $(ls datasets/BRATS2023/training/BraTS-GLI-00000-000/ | wc -l)"

              python -c "import torch; print(f'PyTorch version (conda): {torch.__version__}')"
              python -c "import torch; print(f'CUDA available (conda): {torch.cuda.is_available()}')"
              python -c "import torch; print(f'GPUs available (conda): {torch.cuda.device_count()}')"

              bash run.sh --sampling-strategy direct --timesteps 1000 --mode train --train_modality all
              
              ls -la /data/checkpoints/

              echo "Job completed successfully"
         
          volumeMounts:
            - name: workspace
              mountPath: /app
            - name: data
              mountPath: /data
            - name: shm
              mountPath: /dev/shm
          resources:
            requests:
              memory: 25Gi
              cpu: "15"
              nvidia.com/a100: "1"
            limits:
              memory: 30Gi
              cpu: "18"
              nvidia.com/a100: "1"
      volumes:
        - name: workspace
          emptyDir:
            sizeLimit: 50Gi
        - name: data
          persistentVolumeClaim:
            claimName: brats2025-3
        - name: shm
          emptyDir:
            medium: Memory
            sizeLimit: 16Gi
      restartPolicy: Never