apiVersion: batch/v1
kind: Job
metadata:
  name: fast-fast-cwdm-training
  labels:
    app: fast-fast-cwdm
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        app: fast-cwdm
    spec:
      nodeSelector:
        #topology.kubernetes.io/region: us-west
        nautilus.io/linstor: "true"

      tolerations:
        - key: nvidia.com/gpu
          operator: Exists
        - key: nvidia.com/gpu
          operator: Exists
          effect: PreferNoSchedule
      containers:
        - name: brats-processing
          image: gitlab-registry.nrp-nautilus.io/prp/jupyter-stack/prp
          env:
            - name: REPO_PATH
              value: /app/fast-cwdm
            - name: PYTHONPATH
              value: /app/fast-cwdm
            - name: CUDA_VISIBLE_DEVICES
              value: "0"
            - name: nnUNet_raw
              value: /app/nnunet/raw
            - name: nnUNet_preprocessed
              value: /app/nnunet/preprocessed
            - name: nnUNet_results
              value: /app/nnunet/results
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: PYTHONIOENCODING
              value: "UTF-8"
            - name: WANDB_API_KEY
              valueFrom:
                secretKeyRef:
                  name: wandb-credentials
                  key: api-key
            - name: WANDB_PROJECT
              value: "cwmd-3d-brats"
            - name: WANDB_ENTITY
              value: "timgsereda"
            - name: WANDB_MODE
              value: "online"
            - name: USE_TENSORBOARD
              value: "true"
          command: ["/bin/bash", "-c"]
          args:
            - |
              sudo rm -r /data/checkpoints/
              sudo mkdir /data/checkpoints/
              sudo chmod 777 /data/checkpoints/

              git clone https://github.com/tsereda/fast-cwdm.git ${REPO_PATH}
              cd ${REPO_PATH}
              
              sudo apt-get update && sudo apt-get install -y p7zip-full wget git
              
              # Create target directories
              mkdir -p datasets/BRATS2023
              
              # Extract both datasets directly to BRATS2023 directory
              training_zip="/data/ASNR-MICCAI-BraTS2023-GLI-Challenge-TrainingData.zip"
              if [ -f "$training_zip" ]; then
                echo "Extracting training data..."
                7z x "$training_zip" -o"datasets/BRATS2023/" -y
                echo "Training data extracted successfully"
              fi
              
              validation_zip="/data/ASNR-MICCAI-BraTS2023-GLI-Challenge-ValidationData.zip"
              if [ -f "$validation_zip" ]; then
                echo "Extracting validation data..."
                7z x "$validation_zip" -o"datasets/BRATS2023/" -y
                echo "Validation data extracted successfully"
              fi
              
              # Create symlinks to maintain expected directory structure
              if [ -d "datasets/BRATS2023/ASNR-MICCAI-BraTS2023-GLI-Challenge-TrainingData" ]; then
                ln -sf ASNR-MICCAI-BraTS2023-GLI-Challenge-TrainingData datasets/BRATS2023/training
              fi
              
              if [ -d "datasets/BRATS2023/ASNR-MICCAI-BraTS2023-GLI-Challenge-ValidationData" ]; then
                ln -sf ASNR-MICCAI-BraTS2023-GLI-Challenge-ValidationData datasets/BRATS2023/validation
              fi
              
              echo "Training patients: $(ls datasets/BRATS2023/training/ | wc -l)"
              echo "Validation patients: $(ls datasets/BRATS2023/validation/ | wc -l)"
              echo "Sample training patient files: $(ls datasets/BRATS2023/training/BraTS-GLI-00000-000/ | wc -l)"
              
              pip install pyyaml tqdm numpy nibabel wandb matplotlib blobfile tensorboard
              
              python -c "import wandb; print(f'W&B version: {wandb.__version__}')"
              python -c "import torch; print(f'GPUs available: {torch.cuda.device_count()}')"

              python --version

              echo "Training patients: $(ls datasets/BRATS2023/training/ | wc -l)"
              echo "Validation patients: $(ls datasets/BRATS2023/validation/ | wc -l)"
              echo "Sample training patient files: $(ls datasets/BRATS2023/training/BraTS-GLI-00000-000/ | wc -l)"

              python -c "
              import torch
              print(f'PyTorch version: {torch.__version__}')
              print(f'CUDA available: {torch.cuda.is_available()}')
              print(f'CUDA version: {torch.version.cuda}')
              print(f'Device count: {torch.cuda.device_count()}')
              if torch.cuda.is_available():
                  print(f'Current device: {torch.cuda.current_device()}')
                  print(f'Device name: {torch.cuda.get_device_name(0)}')
              "

              bash run.sh --sampling-strategy sampled --timesteps 10 --mode train --train_modality all
              
              ls -la /data/checkpoints/

              echo "Job completed successfully"
         
          volumeMounts:
            - name: workspace
              mountPath: /app
            - name: data
              mountPath: /data
            - name: shm
              mountPath: /dev/shm
        
          resources:
            requests:
              memory: 25Gi
              cpu: "15"
              nvidia.com/a100: "1"
            limits:
              memory: 30Gi
              cpu: "18"
              nvidia.com/a100: "1"
     
      volumes:
        - name: workspace
          emptyDir:
            sizeLimit: 50Gi
        - name: data
          persistentVolumeClaim:
            claimName: brats2025-5
        - name: shm
          emptyDir:
            medium: Memory
            sizeLimit: 16Gi
     
      restartPolicy: Never